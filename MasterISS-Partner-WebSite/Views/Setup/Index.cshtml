@using PagedList.Mvc
@using MasterISS_Partner_WebSite.Localization
@using MasterISS_Partner_WebSite.Helpers
@using MasterISS_Partner_WebSite.ViewModels.Setup
@using MasterISS_Partner_WebSite.ViewModels.Setup.Response
@model  PagedList.StaticPagedList<GetTaskListResponseViewModel>
@{
    <link href="~/Content/css/custom-css/map.css" rel="stylesheet" />

    ViewBag.Title = View.SetupPanel;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var search = ViewBag.Search as GetTaskListRequestViewModel ?? new GetTaskListRequestViewModel();
    var map = new UpdateClientGPSRequestViewModel();
}
<div class="content d-flex flex-column flex-column-fluid" id="kt_content">
    <!--begin::Subheader-->
    <div class="subheader py-2 py-lg-6 subheader-transparent" id="kt_subheader">
        <div class="container">

            @using (Html.BeginForm("Index", "Setup", FormMethod.Get, new { @class = "mb-15 my-8" }))
            {
                <div class="row mb-8">
                    <div class="col-lg-4 mb-lg-0 mb-12">
                        <label>@View.DateRange:</label>
                        <div class="input-daterange input-group" id="kt_datepicker">
                            @Html.TextBox("TaskListStartDate", search.TaskListStartDate, new { @placeholder = DateTime.Now.ToString("dd.MM.yyyy HH:mm"), @class = "form-control" })
                            <div class="input-group-append">
                                <span class="input-group-text">
                                    <i class="la la-ellipsis-h"></i>
                                </span>
                            </div>
                            @Html.TextBox("TaskListEndDate", search.TaskListEndDate, new { @placeholder = DateTime.Now.ToString("dd.MM.yyyy HH:mm"), @class = "form-control" })
                        </div>
                    </div>
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        @Html.LabelFor(m => search.SearchedName)
                        @Html.TextBox("SearchedName", search.SearchedName, new { @placeholder = Html.DisplayNameFor(m => search.SearchedName), @class = "form-control datatable-input", @data_col_index = "1" })
                    </div>
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        @Html.LabelFor(m => search.TaskType)
                        @Html.DropDownList("TaskType", (SelectList)ViewBag.TaskType, View.Select, new { @class = "form-control datatable-input", @data_col_index = "2" })
                    </div>
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        @Html.LabelFor(m => search.FaultCode)
                        @Html.DropDownList("FaultCode", (SelectList)ViewBag.FaultCodes, View.Select, new { @class = "form-control datatable-input", @data_col_index = "2" })
                    </div>
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        @Html.LabelFor(m => search.SearchedTaskNo)
                        @Html.Editor("SearchedTaskNo", new { htmlAttributes = new { @class = "form-control datatable-input", @data_col_index = "4", @type = "text" } })
                    </div>
                </div>

                <div class="row mt-8">
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        @Html.ValidationMessageFor(m => search.TaskListStartDate)
                    </div>
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        @Html.ValidationMessageFor(m => search.TaskListEndDate)
                    </div>
                </div>

                <div class="row mt-8">
                    <div class="col-lg-12">
                        <button type="submit" class="btn btn-primary btn-primary--icon" id="kt_search">
                            <span>
                                <i class="la la-search"></i>
                                <span>@View.Filter</span>
                            </span>
                        </button>&nbsp;&nbsp;
                        <a href="@Url.Action("Index","Setup")" class="btn btn-secondary btn-secondary--icon" id="kt_reset">
                            <span>
                                <i class="la la-close"></i>
                                <span>@View.Reset</span>
                            </span>
                        </a>
                    </div>
                </div>
            }

            <span style="color:red">@Html.Raw(TempData["GetTaskDetailError"])</span>
            <span style="color:red">@Html.Raw(TempData["CustomerContractResponse"])</span>

            @if (ViewBag.ValidationError == null && ViewBag.Max30Days == null && ViewBag.StartTimeBiggerThanEndTime == null && ViewBag.ErrorMessage == null && ViewBag.DateFormatIsNotCorrect == null)
            {
                <div class="row">
                    @foreach (var item in Model)
                    {
                        <div class="col-xl-4">
                            <!--begin::Card-->
                            <div class="card card-custom gutter-b card-stretch">
                                <div class=" ribbon ribbon-left">
                                    @if (item.TaskStatusByControl == (int)MasterISS_Partner_WebSite_Enums.TaskStatusEnum.New)
                                    {
                                        <div class="ribbon-target bg-success" style="top: 10px; left: -2px;">@Html.DisplayFor(modelItem => item.TaskStatus)</div>
                                    }
                                    else if (item.TaskStatusByControl == (int)MasterISS_Partner_WebSite_Enums.TaskStatusEnum.Completed)
                                    {
                                        <div class="ribbon-target bg-danger" style="top: 10px; left: -2px;">@Html.DisplayFor(modelItem => item.TaskStatus)</div>
                                    }
                                    else
                                    {
                                        <div class="ribbon-target bg-warning" style="top: 10px; left: -2px;">@Html.DisplayFor(modelItem => item.TaskStatus)</div>
                                    }
                                </div>                                                    <!--begin::Body-->
                                <div class="card-body pt-4 d-flex flex-column justify-content-between">
                                    <!--begin::Toolbar-->
                                    <div class="d-flex justify-content-end">
                                        <div class="dropdown dropdown-inline" data-toggle="tooltip" title="" data-placement="left" data-original-title="Quick actions">
                                            <a href="#" class="btn btn-clean btn-hover-light-primary btn-sm btn-icon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                <i class="ki ki-bold-more-hor"></i>
                                            </a>
                                            <div class="dropdown-menu dropdown-menu-md dropdown-menu-right">
                                                <!--begin::Navigation-->
                                                <ul class="navi navi-hover">
                                                    <li class="navi-header font-weight-bold py-4">
                                                        <span class="font-size-lg">@View.OperationMenu</span>
                                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                            <i aria-hidden="true" class="ki font-size-h5 ki-close"></i>
                                                        </button>
                                                    </li>
                                                    <li class="navi-separator mb-3 opacity-70"></li>
                                                    <li class="navi-item">
                                                        <div class="navi-link">
                                                            <span class="navi-text" data-toggle="modal" data-target="#exampleModalCenterSession">
                                                                <input class="btn-sm btn btn-block btn-outline-info customer-session-info-button" value="@View.CustomerSessionInfo" dataValue="@item.TaskNo" />
                                                            </span>
                                                        </div>
                                                    </li>


                                                    <li class="navi-item">
                                                        <div class="navi-link">
                                                            <span class="navi-text" data-toggle="modal" data-target="#exampleModalCenterGeneralInfo">
                                                                <input class="btn-sm btn btn-block btn-outline-info customer-info-button" value="@View.CustomerInfo" dataValue="@item.TaskNo" />
                                                            </span>
                                                        </div>
                                                    </li>

                                                    <li class="navi-item">
                                                        <div class="navi-link">
                                                            <span class="navi-text" data-toggle="modal" data-target="#exampleModalCenterLine">
                                                                <input class="btn-sm btn btn-block btn-outline-info customer-line-info-button" value="@View.CustomerLineDetails" dataValue="@item.TaskNo" />
                                                            </span>
                                                        </div>
                                                    </li>

                                                    <li class="navi-item">
                                                        @using (Html.BeginForm("CustomerContractInfo", "Setup", new { taskNo = item.TaskNo }, FormMethod.Post))
                                                        {
                                                            <div class="navi-link">
                                                                <span class="navi-text">
                                                                    <input type="submit" class="btn-sm btn btn-block btn-outline-info" id="GetCustomerDetail" value="@View.DownloadTheContract" />
                                                                </span>
                                                            </div>
                                                        }
                                                    </li>

                                                    <li class="navi-item">
                                                        <div class="navi-link">
                                                            <span class="navi-text" data-toggle="modal" data-target="#exampleModalUploadDocumentCenter">
                                                                <input class="btn-sm btn btn-block btn-outline-info customer-upload-document" value="@View.UploadDocument" dataValue="@item.TaskNo" />
                                                            </span>
                                                        </div>

                                                    </li>
                                                    <li class="navi-item">
                                                        <div class="navi-link">
                                                            <span class="navi-text" data-toggle="modal" data-target="#exampleModalUpdateLocation">
                                                                <input class="btn-sm btn btn-block btn-outline-info customer-localition-info-button" value="@View.UpdateClientLocation" dataValue="@item.TaskNo" />
                                                            </span>
                                                        </div>

                                                    </li>
                                                    <li class="navi-item">
                                                        <div class="navi-link">
                                                            <span class="navi-text" data-toggle="modal" data-target="#examplegetTaskFile">
                                                                <input class="btn-sm btn btn-block btn-outline-info get-task-file-button" value="@View.ViewUploadedPhotos" dataValue="@item.TaskNo" />
                                                            </span>
                                                        </div>
                                                    </li>
                                                    <li class="navi-separator mt-3 opacity-70"></li>
                                                    <li class="navi-footer py-4">
                                                        <a class="btn btn-light-warning btn-block text-info text-hover-white info font-weight-bold btn-sm task-update-notRendezvous-button" dataValue="@item.TaskNo" data-toggle="modal" data-target="#exampleModalUpdateTaskNotRendezvous">
                                                            <i class="ki ki-plus text-info icon-sm"></i> @View.ChangeTaskAddNote
                                                        </a>
                                                    </li>
                                                </ul> <!--end::Navigation-->
                                            </div>
                                        </div>
                                    </div> <!--end::Toolbar--> <!--begin::User-->
                                    <div class="d-flex align-items-center my-4 mb-2">

                                        <!--begin::Title-->
                                        <div class="d-flex flex-column">

                                            <span class=" font-weight-bold text-hover-primary font-size-h5 mb-0">@Html.DisplayFor(modelItem => item.ContactName)</span>
                                        </div>
                                        <!--end::Title-->
                                    </div>
                                    <div class="separator separator-dashed mt-2 my-2"></div> <!--end::User--> <!--begin::Info-->
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().TaskNo)</span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.TaskNo)</span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().XDSLNo)</span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.XDSLNo)</span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().TaskIssueDate)</span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.TaskIssueDate)</span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">@View.CallCustomer</span>
                                        <span class="text-dark flex-root font-weight-bold"><button type="button" class="btn btn-outline-success btn-sm call-customer-button" dataValue="@item.TaskNo"><i class="fas fa-phone-alt button"></i>@View.Call</button></span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().TaskType)</span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.TaskType)</span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().ReservationDate)</span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.ReservationDate)</span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">
                                            <a href="https://www.google.com/maps/search/?api=1&query=@item.AddressLatitudeandLongitude[0],@item.AddressLatitudeandLongitude[1]" target="_blank" class="btn btn-outline-info btn-sm">
                                                <i class="fas fa-map-marker-alt button"></i> @View.SetupAddress
                                            </a>
                                        </span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.Address)</span>
                                    </div>

                                    <div class="separator separator-dashed mt-1 my-2"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-info flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().SetupStaffEnteredMessage)</span>
                                        <span class="text-dark-50 flex-root font-weight">@Html.DisplayFor(modelItem => item.SetupStaffEnteredMessage)</span>
                                    </div>

                                    <div class="separator separator-dashed mt-1 my-2"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-info flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().FaultCodesDisplayText)</span>
                                        <span class="text-dark-50 flex-root font-weight">@Html.DisplayFor(modelItem => item.FaultCodesDisplayText)</span>
                                    </div>

                                    <div class=" justify-content-center">

                                        <hr class="my-4 bg-secondary">
                                        <div class="d-flex mb-2">
                                            <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().RendezvousTeamStaffName)</span>
                                            <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.RendezvousTeamStaffName)</span>
                                        </div>
                                        <div class="separator separator-dashed mt-1 my-1"></div>
                                        <div class="d-flex mb-2">
                                            <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().SetupTeamStaffName)</span>
                                            <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.SetupTeamStaffName)</span>
                                        </div>

                                        @if (User.IsInRole("Admin") || User.IsInRole("RendezvousTeam"))
                                        {
                                            if (item.IsCorfirmation == false && item.TaskStatusByControl == (int)MasterISS_Partner_WebSite_Enums.TaskStatusEnum.Completed)
                                            {
                                                <div class="separator separator-dashed mt-1 my-1"></div>
                                                <div class="d-flex mb-2">
                                                    <span class="navi-text">
                                                        <input type="button" class="btn-sm my-2 btn btn-outline-success give-confirmation-button" value="@View.GiveConfirmation" dataValue="@item.TaskNo" />
                                                        &nbsp &nbsp &nbsp
                                                    </span>
                                                </div>
                                            }
                                            if (string.IsNullOrEmpty(item.SetupTeamStaffName))
                                            {
                                                <span class="navi-text" data-toggle="modal" data-target="#exampleModalUpdateTask">
                                                    <input type="button" class="btn-sm my-2 btn btn-outline-primary task-update-button" dataValue="@item.TaskNo" value="@View.AssignToSetupTeam" />
                                                    &nbsp &nbsp &nbsp
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="navi-text" data-toggle="modal" data-target="#exampleModalUpdateTask">
                                                    <input type="button" class="btn-sm my-2 btn btn-outline-primary task-update-button" dataValue="@item.TaskNo" value="@View.ChangeSetupTeam" />
                                                    &nbsp &nbsp &nbsp
                                                </span>
                                            }
                                        }
                                        @if (User.IsInRole("Admin"))
                                        {
                                            if (!string.IsNullOrEmpty(item.RendezvousTeamStaffName) && !string.IsNullOrEmpty(item.SetupTeamStaffName))
                                            {
                                                <span class="navi-text" data-toggle="modal" data-target="#exampleModalSendPool">
                                                    <input type="button" class="btn-sm my-2 btn btn-outline-danger send-pool-button" dataValue="@item.TaskNo" value="@View.SendBackToThePool" />
                                                    &nbsp &nbsp &nbsp
                                                </span>
                                            }
                                            if (!string.IsNullOrEmpty(item.RendezvousTeamStaffName) && string.IsNullOrEmpty(item.SetupTeamStaffName))
                                            {
                                                <span class="navi-text" data-toggle="modal" data-target="#exampleModalOtherRendezvousTeam">
                                                    <input type="button" class="btn-sm my-2 btn btn-outline-danger assign-rendezvous-team-button" dataValue="@item.TaskNo" value="@View.ChangeRendezvousTeam" />
                                                    &nbsp &nbsp &nbsp
                                                </span>
                                            }
                                        }
                                    </div> <!--end::Info--> <!--end::Card Body-->
                                </div>
                            </div>
                        </div>
                    }
                </div> <!--end::Info--> <!--end::Card Body-->
            }
            else
            {
                <div align="center">
                    <div class="text-danger">
                        <span>@ViewBag.Max30Days</span>
                        <span>@ViewBag.ErrorMessage</span>
                        <span>@ViewBag.StartTimeBiggerThanEndTime</span>
                        <span>@ViewBag.DateFormatIsNotCorrect</span>
                    </div>
                </div>
            }
            @if (Model != null && Model.TotalItemCount > 0)
            {
                <div class="card card-custom">
                    <div class="card-body py-7">
                        <!--begin::Pagination-->
                        <div class="d-flex justify-content-between align-items-center flex-wrap">
                            <div class="d-flex flex-wrap mr-3">
                                @Html.PagedListPager(Model, page => Url.Action("Index", "Setup", new
                           {
                               page = page,
                               search.TaskListStartDate,
                               search.TaskListEndDate,
                               search.FaultCode,
                               search.SearchedName,
                               search.TaskType,
                           }),
                           new PagedListRenderOptions
                           {
                           })
                            </div>
                            <div class="d-flex align-items-center">
                                <span class="text-muted"> @View.Total @Model.TotalItemCount @View.RecordFound @View.OnThisPage @Model.FirstItemOnPage @View.To @Model.LastItemOnPage @View.Showing</span>
                            </div>
                        </div>
                        <!--end:: Pagination-->
                    </div>
                </div>
            }

            <div class="text-danger">
                @Html.Raw(TempData["SendTaskToSchedulerError"])
                @Html.Raw(TempData["GeneralError"])
            </div>

        </div>
    </div>

</div>

<div class="modal fade" id="exampleModalCenterGeneralInfo" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="CustomerInfoContainer">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="examplegetTaskFile" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="GetFileContainer">
            </div>
        </div>

    </div>
</div>

<div class="modal fade" id="exampleModalSendPool" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="SendPoolContainer">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalCenterSession" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="CustomerSessionInfoContainer">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalCenterLine" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="CustomerLineInfoContainer">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalUploadDocumentCenter" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="CustomerUploaodDocumentContainer">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalUpdateLocation" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div class="py-2">
                    <span class="text-dark-75 font-weight-bolder d-block font-size-h5">@View.UpdateClientLocation</span>
                </div>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i aria-hidden="true" class="ki font-size-h5 ki-close"></i>
                </button>
            </div>

            <div class="modal-body">
                <div class="input-daterange input-group" id="kt_datepicker">
                    @Html.TextBox("Latitude", null, new { @placeholder = Html.DisplayNameFor(m => map.Latitude), @class = "form-control datatable-input Latitude", @data_col_index = "5" })
                    <div class="input-group-append">
                        <span class="input-group-text">
                            <i class="la la-ellipsis-h"></i>
                        </span>
                    </div>
                    @Html.TextBox("Longitude", null, new { @class = "form-control datatable-input Longitude", placeholder = Html.DisplayNameFor(m => map.Longitude), @data_col_index = "5" })

                </div>
                <div class="form-group my-8 mb-1">
                </div>
            </div>

            <div class="error-codes-container" style="display:none">
                <div class="separator separator-dashed mt-2 my-4"></div>
                <div class="text-danger error-codes" align="center"></div>
                <div class="separator separator-dashed mt-2 my-4"></div>
            </div>

            @Html.Map("map-container", View.Map, View.SearchedPlace)
            @using (Ajax.BeginForm("UpdateClientLocation", "Setup", new AjaxOptions { HttpMethod = "POST", OnComplete = "GenericResult" }))
            {
                @Html.Hidden("LatitudeHidden", null, new { @class = "Latitude" })
                @Html.Hidden("LongitudeHidden", null, new { @class = "Longitude" })
                @Html.Hidden("TaskNo", null, new { @class = "taskNoToUpdateClientLocation" })
                <div class="modal-footer">
                    <button type="button" class="btn btn-light-primary font-weight-bold" data-dismiss="modal">@View.Close</button>
                    <input type="submit" class="btn btn-info font-weight-bold" value="@View.ChangeAndSave" />
                </div>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalUpdateTaskNotRendezvous" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="TaskUpdateNotRendezvousContainer">

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalUpdateTask" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="TaskUpdateContainer">

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalOtherRendezvousTeam" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="RendezvousTeamContainer">

            </div>
        </div>
    </div>
</div>



@section Javascript{

    <script>
        function GetDropzone() {

        Dropzone.autoDiscover = false;
        $('#myDropzone').dropzone({
            //parameter name value
            paramName: "files",
            //clickable div id
            clickable: '#previews',
            //preview files container Id
            previewsContainer: "#previews",
            autoProcessQueue: false,
            uploadMultiple: true,
            parallelUploads: 100,
            maxFiles: 100,
            //  url:"/", // url here to save file
            maxFilesize: 100,//max file size in MB,
            addRemoveLinks: true,
            dictResponseError: 'Server not Configured',
            acceptedFiles: ".png,.jpg,.jpeg,.pdf",// use this to restrict file type
            init: function () {
                var self = this;
                // config
                self.options.addRemoveLinks = true;
                self.options.dictRemoveFile = "@View.Delete";
                //New file added
                self.on("addedfile", function (file) {
                    console.log('new file added ', file);
                    $('.dz-success-mark').hide();
                    $('.dz-error-mark').hide();
                });
                // Send file starts
                self.on("sending", function (file) {
                    console.log('upload started', file);
                    $('.meter').show();
                });

                 //File upload Progress
                self.on("totaluploadprogress", function (progress) {
                    console.log("progress ", progress);
                    $('.roller').width(progress + '%');
                });

                self.on("queuecomplete", function (progress) {
                    $('.meter').delay(999).slideUp(999);
                });

                // On removing file
                self.on("removedfile", function (file) {
                    console.log(file);
                });

                $('#Submit').on("click", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    // Validate form here if needed

                    if (self.getQueuedFiles().length > 0) {
                        self.processQueue();


                    } else {
                        self.uploadFiles([]);
                        $('#myDropzone').submit();
                    }

                });



                self.on("successmultiple", function (files, response) {
                    if (response.status=="Success") {
                         var message = response.message;
                         var url='@Url.Action("Index", "Setup")';
                         GetAlert(message, "true",url);
                    }
                    else {
                        $(".error-codes-container").show();
                        $(".error-codes").html(response.ErrorMessage);
                    }

                });
            }
        });
        }

    $("#CustomerUploaodDocumentContainer").on('change', '#AttachmentTypesEnum', function () {
        $("#previews").show();
        GetDropzone();

    });

    $("#TaskUpdateNotRendezvousContainer").on('change', '#FaultCodesDrowndown', function () {
        $("#previews").show()
        GetDropzone();
    });
    </script>


    <script>
          function GenericResult(data, status) {
            if (status = "success") {
                var responseStatus = data.responseJSON.status;
                if (responseStatus == "Success") {
                    var message = data.responseJSON.message;
                    var url='@Url.Action("Index", "Setup")';
                    GetAlert(message, "true",url);
                }
                else if (responseStatus =="FailedAndRedirect") {
                    var redirectMessage = data.responseJSON.ErrorMessage;
                    var urlHome='@Url.Action("Index", "Home")';
                    GetAlert(redirectMessage, "false", urlHome);
                }
                else {
                    $(".error-codes-container").show();
                    $(".error-codes").html(data.responseJSON.ErrorMessage);
                }
            }
            else {
                console.log("Error");
            }
        }
    </script>


    <script>
        MapJS('.map-container', '.Latitude', '.Longitude');

        $(".assign-rendezvous-team-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("ListPartnerRendezvousTeam", "Setup")',
                    type: 'GET',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#RendezvousTeamContainer").html(data);
                    },
                });
        });

         $(".get-task-file-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("GetTasksFileBase64", "Setup")',
                    type: 'POST',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#GetFileContainer").html(data);
                    },
                });
          });

        $("#TaskUpdateContainer").on('change', '.FaultCodesDrowndownByUpdateTaskStatus', function () {
            var value = $(this).val();
            if (value == '9') {//Rendezvous Made
                $('.setupTeamWorkAreasContainer').show(100);
                $('.assignTaskButton').hide()
            } else {
                $('.setupTeamWorkAreasContainer').hide(100);
                $('.assignTaskButton').show()
            }
        });

        $("#TaskUpdateContainer").on('change', '.setupTeamWorkDays', function () {
            var hoursSelect = $(this).parent().children('.setupTeamWorkHours');

            var selectedSelectDateValue = $(this).find(":selected").val();
            var selectDataValue = $(this).attr("dataValue");
            var postData = { staffId: selectDataValue, date:selectedSelectDateValue };

               $.ajax({
                      url: '@Url.Action("GetStaffAvailableHours", "Setup")',
                      type: "POST",
                      dataType: "json",
                      data: postData,
                      complete: function (data, status) {
                          if (status == "success") {
                              var result = data.responseJSON.list;
                              $(hoursSelect).find("option").not(":first").remove();
                              for (var i = 0; i < result.length; i++) {
                                  hoursSelect.append($('<option>', {
                                      value: result[i].Value,
                                      text: result[i].Name,
                                  }));
                              }
                          }
                          else {
                              console.log("Failed Get Staff Work Days");
                          }
                      }
                  });
        });

        $("#TaskUpdateContainer").on('click', '.assignTaskSetupTeamButton', function () {
            var dataValue = $(this).attr("dataValue");
            var selectedDate = null;
            var selectedTime = null;

            var taskNo = $(".genericContainer").children().children().children("#TaskNo").val();
            var description = $('.genericContainer').children().children().children().children('textarea#description').val();
            var faultCode = $(".genericContainer").children().children().children("#FaultCodes").find(":selected").val();
            $(".assignTaskButtonContainer").each(function () {
                var date = $(this).find("#item_SelectedDate");
                var time = $(this).find("#item_SelectedTime");
                if (date.attr("dataValue")==dataValue.toString()) {
                    selectedDate = date.find(":selected").val()
                    selectedTime= time.find(":selected").val()
                };
            });

            var postData = { PostTimeValue: selectedTime, PostDateValue: selectedDate, TaskNo: taskNo, Description: description, staffId: dataValue, FaultCodes: faultCode, };
             $.ajax({
                            url: '@Url.Action("UpdateTaskStatus", "Setup")',
                            type: "POST",
                            dataType: "json",
                            data: postData,
                            complete: function (data, status) {
                                        if (status = "success") {
                                var responseStatus = data.responseJSON.status;
                                if (responseStatus == "Success") {
                                    var message = data.responseJSON.message;
                                    var url='@Url.Action("Index", "Setup")';
                                    GetAlert(message, "true",url);
                                }
                                else if (responseStatus =="FailedAndRedirect") {
                                    var redirectMessage = data.responseJSON.ErrorMessage;
                                    var urlHome='@Url.Action("Index", "Home")';
                                    GetAlert(redirectMessage, "false", urlHome);
                                }
                                else {
                                    $(".error-codes-container").show();
                                    $(".error-codes").html(data.responseJSON.ErrorMessage);
                                }
                            }
                            else {
                                console.log("Error");
                            }
                            }
                        });

        });

        $("#TaskUpdateContainer").on('click', '.setupTeamWorkDays', function () {
            var selectedSelect = $(this);

            if ($(this).children().length<=1) {
                var dataValue = selectedSelect.attr("dataValue");
                var postData = { staffId: dataValue};
                $.ajax({
                            url: '@Url.Action("StaffWorkDays", "Setup")',
                            type: "POST",
                            dataType: "json",
                            data: postData,
                            complete: function (data, status) {
                                if (status == "success") {
                                    var result = data.responseJSON.list;
                                    for (var i = 0; i < result.length; i++) {
                                        selectedSelect.append($('<option>', {
                                            value: result[i].Value,
                                            text: result[i].Name,
                                        }));
                                    }
                                }
                                else {
                                    console.log("Failed Get Staff Work Days");
                                }
                            }
                        });
            }
        });

        $(".task-update-notRendezvous-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("UpdateTaskStatusNotRendezvous", "Setup")',
                    type: 'GET',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#TaskUpdateNotRendezvousContainer").html(data);
                    },
                });
        });

        $(".send-pool-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("SendTaskToScheduler", "Setup")',
                    type: 'GET',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#SendPoolContainer").html(data);
                    },
                });
         });

        $(".task-update-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("UpdateTaskStatus", "Setup")',
                    type: 'GET',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#TaskUpdateContainer").html(data);
                    },
                });
         });

        $(".customer-line-info-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("CustomerLineInfo", "Setup")',
                    type: 'POST',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#CustomerLineInfoContainer").html(data);
                    },
                });
         });

        $(".customer-localition-info-button").click(function () {
            var dataValue = $(this).attr("dataValue");
            $(".taskNoToUpdateClientLocation").val(dataValue);
         });

        $(".customer-upload-document").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("UploadDocument", "Setup")',
                    type: 'GET',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#CustomerUploaodDocumentContainer").html(data);
                    },
                });
        });


        $(".customer-info-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("CustomerDetail", "Setup")',
                    type: 'POST',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#CustomerInfoContainer").html(data);
                    },
                });
        });


        $(".customer-session-info-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("CustomerSessionInfo", "Setup")',
                    type: 'POST',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#CustomerSessionInfoContainer").html(data);
                    },
                });
        });


        $(".call-customer-button").click(function () {
         var dataValue = $(this).attr("dataValue");
         var url = '@Url.Action("CallCustomer", "Setup")';
            var title = '@View.AreYouSureYouWantToCallTheCustomer';
         GetSwalFireForConfirmation(dataValue,url,title);
        });

        function GetSwalFireForConfirmation(dataValue,ajaxUrl,title) {
             Swal.fire({
                title: title,
                showDenyButton: true,
                showCancelButton: true,
                confirmButtonText: `@View.Yes`,
                cancelButtonText: `@View.Cancel`,
                }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: ajaxUrl,
                        type: 'GET',
                        data: {
                            taskNo: dataValue,
                        },
                        dataType: 'JSON',
                        success: function (data) {
                            var result = data.status;
                            if (result =="Success") {
                                var message = data.message;
                                var url = '@Url.Action("Index", "Setup")';
                                GetAlert(message, "true", url);
                            }
                            else {
                                var errorMessage = data.ErrorMessage;
                                var url = '@Url.Action("Index", "Home")';
                                GetAlert(errorMessage, "false", url);
                            }
                        },
                    });
                }
            })
        }


        $(".give-confirmation-button").click(function () {
            var dataValue = $(this).attr("dataValue");
            var url = '@Url.Action("GiveConfirmation","Setup")';
            var title= '@View.AreYouSureYouWantToConfirm';
            GetSwalFireForConfirmation(dataValue,url,title);
        });

        $(function () {

            $("#search_TaskListStartDate").mask("99.99.9999 99:99");
            $("#search_TaskListEndDate").mask("99.99.9999 99:99");
            $("#search_SearchedTaskNo").mask("99999");
        });

    </script>
}
