@using PagedList.Mvc
@using MasterISS_Partner_WebSite.Localization
@using MasterISS_Partner_WebSite.Helpers
@using MasterISS_Partner_WebSite.ViewModels.Setup
@using MasterISS_Partner_WebSite.ViewModels.Setup.Response
@model  PagedList.StaticPagedList<GetTaskListResponseViewModel>
@{
    ViewBag.Title = View.SetupPanel;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var search = ViewBag.Search as GetTaskListRequestViewModel ?? new GetTaskListRequestViewModel();
}
<div class="content d-flex flex-column flex-column-fluid" id="kt_content">
    <!--begin::Subheader-->
    <div class="subheader py-2 py-lg-6 subheader-transparent" id="kt_subheader">
        <div class="container">

            @using (Html.BeginForm("Index", "Setup", FormMethod.Get, new { @class = "mb-15 my-8" }))
            {
                <div class="row mb-8">
                    <div class="col-lg-4 mb-lg-0 mb-12">
                        <label>Tarih Aralığı:</label>
                        <div class="input-daterange input-group" id="kt_datepicker">
                            @Html.EditorFor(m => search.TaskListStartDate, new { htmlAttributes = new { @placeholder = DateTime.Now.ToString("dd.MM.yyyy HH:mm"), @class = "form-control" } })
                            <div class="input-group-append">
                                <span class="input-group-text">
                                    <i class="la la-ellipsis-h"></i>
                                </span>
                            </div>
                            @Html.EditorFor(m => search.TaskListEndDate, new { htmlAttributes = new { @placeholder = DateTime.Now.ToString("dd.MM.yyyy HH:mm"), @class = "form-control" } })
                        </div>
                    </div>
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        @Html.LabelFor(m => search.SearchedName)
                        @Html.EditorFor(m => search.SearchedName, new { htmlAttributes = new { @placeholder = Html.DisplayNameFor(m => search.SearchedName), @class = "form-control datatable-input", @data_col_index = "1" } })
                    </div>
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        <label>Görev Türü:</label>
                        <select class="form-control datatable-input" data-col-index="2">
                            <option value="">Seçim Yapınız</option>
                            <option value="Kurulum">Kurulum</option>
                            <option value="Arıza">Arıza</option>
                            <option value="ortak Çalışma">Ortak çalışma</option>
                        </select>
                    </div>
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        <label>Görev Durumu:</label>
                        <select class="form-control datatable-input" data-col-index="2">
                            <option value="">Seçim Yapınız</option>
                            <option value="1">Arıza Yok</option>
                            <option value="2">Geçersiz adres</option>
                            <option value="3">Telekom Hat Arizası</option>
                            <option value="4">İstek İptal Edildi</option>
                            <option value="5">Modem Arızası</option>
                            <option value="6">Telekom Genel Arızası</option>
                            <option value="7">Bina Kurulum Hatası</option>
                            <option value="8">Müşteriye Ulaşılamadı</option>
                            <option value="9">Randevu Alındı</option>
                            <option value="10">Kurulum Tamamlandı</option>
                            <option value="11">Müşteri Kurulumu Yaptı</option>
                            <option value="12">Yeni Rezervasyon Bekleniyor.</option>
                        </select>
                    </div>
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        @Html.LabelFor(m => search.SearchedTaskNo)
                        @Html.EditorFor(m => search.SearchedTaskNo, new { htmlAttributes = new { @class = "form-control datatable-input", @data_col_index = "4", @type = "text" } })
                    </div>
                </div>

                <div class="row mt-8">
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        @Html.ValidationMessageFor(m => search.TaskListStartDate)
                    </div>
                    <div class="col-lg-2 mb-lg-0 mb-6">
                        @Html.ValidationMessageFor(m => search.TaskListEndDate)
                    </div>
                </div>

                <div class="row mt-8">
                    <div class="col-lg-12">
                        <button type="submit" class="btn btn-primary btn-primary--icon" id="kt_search">
                            <span>
                                <i class="la la-search"></i>
                                <span>@View.Filter</span>
                            </span>
                        </button>&nbsp;&nbsp;
                        <button type="button" class="btn btn-secondary btn-secondary--icon" id="kt_reset">
                            <span>
                                <i class="la la-close"></i>
                                <span>Sıfırla</span>
                            </span>
                        </button>
                    </div>
                </div>
            }

            <span style="color:red">@Html.Raw(TempData["GetTaskDetailError"])</span>
            <span style="color:red">@Html.Raw(TempData["CustomerContractResponse"])</span>

            @if (ViewBag.ValidationError == null && ViewBag.Max30Days == null && ViewBag.StartTimeBiggerThanEndTime == null && ViewBag.ErrorMessage == null)
            {
                <div class="row">
                    @foreach (var item in Model)
                    {
                        <div class="col-xl-4">
                            <!--begin::Card-->
                            <div class="card card-custom gutter-b card-stretch">
                                <div class=" ribbon ribbon-left">
                                    <div class="ribbon-target bg-info" style="top: 10px; left: -2px;">@Html.DisplayFor(modelItem => item.TaskStatus)</div>
                                </div>                                                    <!--begin::Body-->
                                <div class="card-body pt-4 d-flex flex-column justify-content-between">
                                    <!--begin::Toolbar-->
                                    <div class="d-flex justify-content-end">
                                        <div class="dropdown dropdown-inline" data-toggle="tooltip" title="" data-placement="left" data-original-title="Quick actions">
                                            <a href="#" class="btn btn-clean btn-hover-light-primary btn-sm btn-icon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                <i class="ki ki-bold-more-hor"></i>
                                            </a>
                                            <div class="dropdown-menu dropdown-menu-md dropdown-menu-right">
                                                <!--begin::Navigation-->
                                                <ul class="navi navi-hover">
                                                    <li class="navi-header font-weight-bold py-4">
                                                        <span class="font-size-lg">İşlem Menüsü</span>
                                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                            <i aria-hidden="true" class="ki font-size-h5 ki-close"></i>
                                                        </button>
                                                    </li>
                                                    <li class="navi-separator mb-3 opacity-70"></li>
                                                    <li class="navi-item">
                                                        <div class="navi-link">
                                                            <span class="navi-text" data-toggle="modal" data-target="#exampleModalCenterSession">
                                                                <input class="btn-sm btn btn-block btn-outline-info customer-session-info-button" value="@View.CustomerSessionInfo" dataValue="@item.TaskNo" />
                                                            </span>
                                                        </div>
                                                    </li>


                                                    <li class="navi-item">
                                                        <div class="navi-link">
                                                            <span class="navi-text" data-toggle="modal" data-target="#exampleModalCenterGeneralInfo">
                                                                <input class="btn-sm btn btn-block btn-outline-info customer-info-button" value="@View.CustomerInfo" dataValue="@item.TaskNo" />
                                                            </span>
                                                        </div>
                                                    </li>

                                                    <li class="navi-item">
                                                        <div class="navi-link">
                                                            <span class="navi-text" data-toggle="modal" data-target="#exampleModalCenterLine">
                                                                <input class="btn-sm btn btn-block btn-outline-info customer-line-info-button" value="@View.CustomerLineDetails" dataValue="@item.TaskNo" />
                                                            </span>
                                                        </div>
                                                    </li>

                                                    <li class="navi-item">
                                                        @using (Html.BeginForm("CustomerContractInfo", "Setup", new { taskNo = item.TaskNo }, FormMethod.Post))
                                                        {
                                                            <div class="navi-link">
                                                                <span class="navi-text">
                                                                    <input type="submit" class="btn-sm btn btn-block btn-outline-info" id="GetCustomerDetail" value="@View.DownloadTheContract" />
                                                                </span>
                                                            </div>
                                                        }
                                                    </li>

                                                    <li class="navi-item">
                                                        <div class="navi-link">
                                                            <span class="navi-text" data-toggle="modal" data-target="#exampleModalUploadDocumentCenter">
                                                                <input class="btn-sm btn btn-block btn-outline-info customer-upload-document" value="@View.UploadDocument" dataValue="@item.TaskNo" />
                                                            </span>
                                                        </div>

                                                    </li>
                                                    <li class="navi-item">
                                                        <div class="navi-link">
                                                            <span class="navi-text" data-toggle="modal" data-target="#exampleModalUpdateLocation">
                                                                <input class="btn-sm btn btn-block btn-outline-info customer-localition-info-button" value="@View.UpdateClientLocation" dataValue="@item.TaskNo" />
                                                            </span>
                                                        </div>

                                                    </li>
                                                    <li class="navi-separator mt-3 opacity-70"></li>
                                                    <li class="navi-footer py-4">
                                                        <a class="btn btn-light-warning btn-block text-info text-hover-white info font-weight-bold btn-sm task-update-notRendezvous-button" dataValue="@item.TaskNo" data-toggle="modal" data-target="#exampleModalUpdateTaskNotRendezvous">
                                                            <i class="ki ki-plus text-info icon-sm"></i> Görev Değiştir Not Ekle
                                                        </a>
                                                    </li>
                                                </ul> <!--end::Navigation-->
                                            </div>
                                        </div>
                                    </div> <!--end::Toolbar--> <!--begin::User-->
                                    <div class="d-flex align-items-center my-4 mb-2">

                                        <!--begin::Title-->
                                        <div class="d-flex flex-column">

                                            <span class=" font-weight-bold text-hover-primary font-size-h5 mb-0">@Html.DisplayFor(modelItem => item.ContactName)</span>
                                        </div>
                                        <!--end::Title-->
                                    </div>
                                    <div class="separator separator-dashed mt-2 my-2"></div> <!--end::User--> <!--begin::Info-->
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().TaskNo)</span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.TaskNo)</span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().XDSLNo)</span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.XDSLNo)</span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().TaskIssueDate)</span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.TaskIssueDate)</span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">müşteriyi ara</span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.ActionLink("ara", "CallCustomer", new { taskNo = item.TaskNo })</span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().TaskType)</span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.TaskType)</span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().ReservationDate)</span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.ReservationDate)</span>
                                    </div>
                                    <div class="separator separator-dashed mt-1 my-1"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-dark-50 flex-root font-weight-bold">
                                            <a href="https://www.google.com/maps/search/?api=1&query=@item.AddressLatitudeandLongitude[0],@item.AddressLatitudeandLongitude[1]" target="_blank" class="btn btn-outline-info btn-sm">
                                                <i class="fas fa-map-marker-alt button"></i>Kurulum Adresi
                                            </a>
                                        </span>
                                        <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.Address)</span>
                                    </div>

                                    <div class="separator separator-dashed mt-1 my-2"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-info flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().SetupStaffEnteredMessage)</span>
                                        <span class="text-dark-50 flex-root font-weight">@Html.DisplayFor(modelItem => item.SetupStaffEnteredMessage)</span>
                                    </div>

                                    <div class="separator separator-dashed mt-1 my-2"></div>
                                    <div class="d-flex mb-2">
                                        <span class="text-info flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().FaultCodesDisplayText)</span>
                                        <span class="text-dark-50 flex-root font-weight">@Html.DisplayFor(modelItem => item.FaultCodesDisplayText)</span>
                                    </div>

                                    <div class=" justify-content-center">

                                        <hr class="my-4 bg-secondary">
                                        <div class="d-flex mb-2">
                                            <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().RendezvousTeamStaffName)</span>
                                            <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.RendezvousTeamStaffName)</span>
                                        </div>
                                        <div class="separator separator-dashed mt-1 my-1"></div>
                                        <div class="d-flex mb-2">
                                            <span class="text-dark-50 flex-root font-weight-bold">@Html.DisplayNameFor(model => model.FirstOrDefault().SetupTeamStaffName)</span>
                                            <span class="text-dark flex-root font-weight-bold">@Html.DisplayFor(modelItem => item.SetupTeamStaffName)</span>
                                        </div>

                                        @if (User.IsInRole("Admin") || User.IsInRole("RendezvousTeam"))
                                        {
                                            if (!string.IsNullOrEmpty(item.SetupTeamStaffName) && item.IsCorfirmation == false)
                                            {
                                                <div class="separator separator-dashed mt-1 my-1"></div>
                                                <div class="d-flex mb-2">
                                                    <span class="navi-text">
                                                        @Html.ActionLink("teyit ver", "GiveConfirmation", "Setup", new { taskNo = item.TaskNo }, new { @class = "btn-large my-2 btn btn-outline-success" })
                                                        &nbsp &nbsp &nbsp
                                                    </span>
                                                </div>
                                            }
                                            if (string.IsNullOrEmpty(item.SetupTeamStaffName))
                                            {
                                                <span class="navi-text">
                                                    <input type="button" class="btn-sm my-2 btn btn-outline-primary task-update-button" dataValue="@item.TaskNo" value="kurulum ekibine ata" />
                                                    &nbsp &nbsp &nbsp
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="navi-text">
                                                    <input type="button" class="btn-sm my-2 btn btn-outline-primary task-update-button" dataValue="@item.TaskNo" value="kurulum ekibine ata" />

                                                    @*@Html.ActionLink("başka bir ekibe ata ", "ShareSetupStaff", "Setup", new { taskNo = item.TaskNo, BBK = item.BBK }, new { @class = "btn-sm my-2 btn btn-outline-primary" })*@
                                                    &nbsp &nbsp &nbsp
                                                </span>
                                            }
                                        }
                                        @if (User.IsInRole("Admin"))
                                        {
                                            if (!string.IsNullOrEmpty(item.RendezvousTeamStaffName) && !string.IsNullOrEmpty(item.SetupTeamStaffName))
                                            {
                                                <span class="navi-text">
                                                    @Html.ActionLink("tekrar Havuza Aktar ", "SendTaskToScheduler", "Setup", new { taskNo = item.TaskNo }, new { @class = "btn-sm my-2 btn btn-outline-danger" })
                                                    &nbsp &nbsp &nbsp
                                                </span>
                                            }
                                            if (!string.IsNullOrEmpty(item.RendezvousTeamStaffName) && string.IsNullOrEmpty(item.SetupTeamStaffName))
                                            {
                                                <span class="navi-text">
                                                    @Html.ActionLink("başka randevu ekibi ", "ListPartnerRendezvousTeam", "Setup", new { BBK = item.BBK, taskNo = item.TaskNo }, new { @class = "btn-sm my-2 btn btn-outline-danger" })
                                                    &nbsp &nbsp &nbsp
                                                </span>
                                            }
                                        }
                                    </div> <!--end::Info--> <!--end::Card Body-->
                                </div>
                            </div>
                        </div>
                    }
                </div> <!--end::Info--> <!--end::Card Body-->
            }
            @if (Model.TotalItemCount > 0)
            {
                <div class="card card-custom">
                    <div class="card-body py-7">
                        <!--begin::Pagination-->
                        <div class="d-flex justify-content-between align-items-center flex-wrap">
                            <div class="d-flex flex-wrap mr-3">
                                @Html.PagedListPager(Model, page => Url.Action("Index", "Setup", new { page }))
                            </div>
                            <div class="d-flex align-items-center">
                                <span class="text-muted"> @View.Total @Model.TotalItemCount @View.RecordFound @View.OnThisPage @Model.FirstItemOnPage @View.To @Model.LastItemOnPage @View.Showing</span>
                            </div>
                        </div>
                        <!--end:: Pagination-->
                    </div>
                </div>
            }
            else
            {
                <div align="center">
                    <div class="text-danger">
                        <span>@ViewBag.Max30Days</span>
                        <span>@ViewBag.ErrorMessage</span>
                        <span>@ViewBag.StartTimeBiggerThanEndTime</span>
                    </div>
                </div>
            }
            <div class="text-danger">
                @Html.Raw(TempData["SendTaskToSchedulerError"])
                @Html.Raw(TempData["GeneralError"])
            </div>

        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalCenterGeneralInfo" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="CustomerInfoContainer">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalCenterSession" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="CustomerSessionInfoContainer">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalCenterLine" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="CustomerLineInfoContainer">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalUploadDocumentCenter" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="CustomerUploaodDocumentContainer">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalUpdateLocation" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="CustomerUpdateLocationContainer">

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalUpdateTaskNotRendezvous" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="TaskUpdateNotRendezvousContainer">

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalUpdateTask" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div id="TaskUpdateContainer">

            </div>
        </div>
    </div>
</div>

@section Javascript{
    <script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>

    <script>
        function UploadDocumentResult(data, status) {
            if (status = "success") {
                var responseStatus = data.responseJSON.status;
                if (responseStatus == "Success") {
                    var url='@Url.Action("Successful", "Setup")';
                    window.location.href = url;
                }
                else {
                    $(".error-codes").html(data.responseJSON.ErrorMessage);
                }
            }
            else {
                console.log("Error");
            }
        }
        function UpdateTaskStatusNotRendezvousResult(data, status) {
            if (status = "success") {
                var responseStatus = data.responseJSON.status;
                if (responseStatus == "Success") {
                    var url='@Url.Action("Successful", "Setup")';
                    window.location.href = url;
                }
                else {
                    $(".error-codes-updateStatusNotRendezvous").html(data.responseJSON.ErrorMessage);
                }
            }
            else {
                console.log("Error");
            }
        }
    </script>


    <script>


        $(".task-update-notRendezvous-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("UpdateTaskStatusNotRendezvous", "Setup")',
                    type: 'GET',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#TaskUpdateNotRendezvousContainer").html(data);
                    },
                });
         });

        $(".task-update-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("UpdateTaskStatus", "Setup")',
                    type: 'GET',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#TaskUpdateContainer").html(data);
                    },
                });
         });

         $(".customer-line-info-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("CustomerLineInfo", "Setup")',
                    type: 'POST',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#CustomerLineInfoContainer").html(data);
                    },
                });
         });

        $(".customer-localition-info-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("UpdateClientLocation", "Setup")',
                    type: 'GET',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#CustomerUpdateLocationContainer").html(data);
                        MapJS('.map-container', '#Latitude', '#Longitude');
                    },
                });
         });

        $(".customer-upload-document").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("UploadDocument", "Setup")',
                    type: 'GET',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#CustomerUploaodDocumentContainer").html(data);
                    },
                });
        });


        $(".customer-info-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("CustomerDetail", "Setup")',
                    type: 'POST',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#CustomerInfoContainer").html(data);
                    },
                });
        });


        $(".customer-session-info-button").click(function () {
            var dataValue = $(this).attr("dataValue");
                $.ajax({
                    url: '@Url.Action("CustomerSessionInfo", "Setup")',
                    type: 'POST',
                    data: {
                        taskNo : dataValue
                    },
                    dataType: 'html',
                    success: function (data) {
                        $("#CustomerSessionInfoContainer").html(data);
                    },
                });
        });




        $(function () {
            $(".pagination-container").children().children().children().addClass("btn btn-icon btn-sm border-0 btn-hover-primary mr-2 my-1");
            $("li.active").children().addClass("btn btn-info");
            $("#search_TaskListStartDate").mask("99.99.9999 99:99");
            $("#search_TaskListEndDate").mask("99.99.9999 99:99");
            $("#search_SearchedTaskNo").mask("99999");
        });
    </script>
}
